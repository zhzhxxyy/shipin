
import React, {PureComponent,Component} from 'react'



import {View,
    Text,
    TextInput,
    StyleSheet,
    Platform,
    TouchableOpacity,
    Image,
    PixelRatio,
    ImageBackground,
    Dimensions,
    Button,
    Alert,
    ScrollView} from 'react-native'


import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
import {sys,NoDataView,isIphoneX} from "../../common/Data"
import HttpUtils from "../../common/HttpUtil"
import {LeftButton} from "./CqsscPublic"
import Toast,{DURATION} from 'react-native-easy-toast';//导入弹出框组件

import {styles} from "../common/homeStyle"



var Buffer = require('buffer').Buffer;


const host = sys.host;
const RIGHT_WIDTH = Dimensions.get('window').width*0.75;
const LEFT_WIDTH = Dimensions.get('window').width*0.25;
const SCREEN_WIDTH = Dimensions.get('window').width;
const  text_arr = ["前二直选复式","前二直选和值","前二跨度","后二直选复式","后二直选和值","后二跨度"];
const  qeTitle_arr = ["万位","千位"];
const  heTitle_arr = ["十位","个位"];
const  hezhi_arr = ["和值"];
const  kuadu_arr = ["跨度"];



var thiz = this;
var headthis;
var thishead_arr = [];



var selectedIndex = 0;






class CustomButton extends Component {

    constructor() {
        super();
        this.state = {
            selected: false,
        };
    }




    hezxhz(currNumber) {//和值计算
        var itemcount = 0;
        var vballs = [];


        var arrzxhzex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];


        for (var i = 0; i < currNumber.length; i++) {
            for (var k = 0; k < currNumber[i].length; k++) {
                vballs[currNumber[i][k]] = currNumber[i][k];

            }
        }

        for (j = 0; j < vballs.length; j++) {

            if (vballs[j] != "" && !isNaN(vballs[j])) {
                itemcount += arrzxhzex[parseInt(vballs[j])];
            }
        }

        return itemcount;
    }


    exkuadu(currNumber) {//跨度计算
        var itemcount = 0;
        var vballs = [];


        var arrkuaduex = [10, 18, 16, 14, 12, 10, 8, 6, 4, 2];
        for (var i = 0; i < currNumber.length; i++) {
            for (var k = 0; k < currNumber[i].length; k++) {
                vballs[currNumber[i][k]] = currNumber[i][k]
            }
        }
        for (j = 0; j < vballs.length; j++) {
            if (vballs[j] != "" && !isNaN(vballs[j])) {
                itemcount += arrkuaduex[parseInt(vballs[j])];
            }
        }
        return itemcount;
    }




    render() {
        var { title,style,xuanzo,type,index } = this.props;


        if(style==undefined){
            style = {backgroundColor:sys.redColor,borderRadius:RIGHT_WIDTH/14,
                width:RIGHT_WIDTH/7,height:RIGHT_WIDTH/7,marginLeft: (RIGHT_WIDTH-RIGHT_WIDTH/7*5)/6}
        }
        if(xuanzo==1)this.state.selected=true;

        const { selected } = this.state;


        let myStyle={};
        if (type==2) {
            myStyle = {margin:0, marginLeft:(RIGHT_WIDTH*5/6-150)/6,marginTop:2};
        } else {
            myStyle = {margin:0, marginLeft:(RIGHT_WIDTH-150)/6,marginTop:(RIGHT_WIDTH-150)/12};
        }

            return (

                <TouchableOpacity index={index} style={[selected?styles.stouchButton : styles.touchButton,myStyle]}
                                   onPress={() => {


                                       {/*this.customclick(index);*/}



                                       var arr = [];

                                       if(index == 1 || index == 4 ) {   //和值

                                         if(this.props.title=='大'){
                                             arr = [10,11,12,13,14,15,16,17,18]
                                         }else if(this.props.title=='小'){
                                             arr = [0,1,2,3,4,5,6,7,8,9]
                                         }else if(this.props.title=='单'){
                                             arr = [1,3,5,7,9,11,13,15,17]
                                         }else if(this.props.title=='双'){
                                             arr = [0,2,4,6,8,10,12,14,16,18]
                                         }else if(this.props.title=='全'){
                                             arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
                                         }

                                       } else {

                                          if(this.props.title=='大'){
                                              arr = [5,6,7,8,9]
                                          }else if(this.props.title=='小'){
                                              arr = [0,1,2,3,4]
                                          }else if(this.props.title=='单'){
                                              arr = [1,3,5,7,9]
                                          }else if(this.props.title=='双'){
                                              arr = [0,2,4,6,8]
                                          }else if(this.props.title=='全'){
                                              arr = [0,1,2,3,4,5,6,7,8,9]
                                          }
                                       }


                                       if(arr.length>0){

                                           for(var key in thishead_arr[this.props.id].refs){

                                            if (key.includes('大') || key.includes('小')
                                            || key.includes('单') || key.includes('双')
                                            || key.includes('全')) {
                                                thishead_arr[this.props.id].refs[key].setState({
                                                    selected:false
                                                });
                                            }
                                               
                                           }



                                            if(index == 1 || index == 4) {

                                                   [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18].map((text, index)=> {
                                                       let reid = this.props.id;
                                                       let res = reid + text;
                                                       let headres = reid + this.props.title;

                                                       thiz.refs[res].setState({selected: false})
                                                   })

                                            } else {

                                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((text, index)=> {
                                                    let reid = this.props.id;
                                                    let res = reid + text;

                                                    let headres = reid + this.props.title;
                                                    thiz.refs[res].setState({selected: false})
                                                })

                                            }
                                           arr.map((text,index)=>{
                                               let reid = this.props.id;
                                               let res = reid+text;
                                               let headres = reid+this.props.title;

                                               thiz.refs[res].setState({selected:!selected})


                                           })
                                       }

                                       this.setState({
                                           selected:!selected
                                       })


                                       this.setState({ selected: !selected } ,() => {
                                           //这里打印的是最新的state值
                                           let wArr = [];
                                           let qArr = [];
                                           let bArr = [];
                                           let sArr = [];
                                           let gArr = [];
                                           let hzArr = [];
                                           let kdArr = [];



                                        for(var key in thiz.refs){

                                            //hzyy
                                            if ((key.indexOf('位') != -1) || (key.indexOf('和值') != -1) || (key.indexOf('跨度') != -1)) {

                                                if(thiz.refs[key].state.selected){

                                                    if(!isNaN(key.substr(3,1))){
 
                                                        if(key.substr(1,2)=='万位'){
                                                            wArr.push(key.substr(3,1));
                                                        }else if(key.substr(1,2)=='千位'){
                                                            qArr.push(key.substr(3,1));
                                                        }else if(key.substr(1,2)=='百位'){
                                                            bArr.push(key.substr(3,1))
                                                        }else if(key.substr(1,2)=='十位'){
                                                            sArr.push(key.substr(3,1));
                                                        }else if(key.substr(1,2)=='个位'){
                                                            gArr.push(key.substr(3,1))
                                                        }else if(key.substr(1,2)=='和值'){
 
                                                            if(key.length == 5){
                                                              hzArr.push(key.substr(3,2))
                                                            } else {
                                                                hzArr.push(key.substr(3,1))
                                                            }
 
                                                            var arr = [];
                                                            arr.push(hzArr);
                                                            count = this.hezxhz(arr);
 
                                                        }else if(key.substr(1,2)=='跨度'){
                                                            kdArr.push(key.substr(3,1))
 
                                                            var arr = [];
                                                            arr.push(kdArr);
                                                            count = this.exkuadu(arr);
                                                        }
 
 
                                                    }
                                                }

                                            }

                                               
                                        }


                                           var count = 0;
                                           if(index == 0) {
                                               thiz.state.number_arr['w'] = wArr;
                                               thiz.state.number_arr['q'] = qArr;
                                               count = wArr.length * qArr.length ;

                                           } else if (index == 1 || index == 4){
                                                thiz.state.number_arr['hz'] = hzArr;


                                               var arr = [];
                                               arr.push(hzArr);
                                               count = this.hezxhz(arr);


                                           } else if (index == 2 || index == 5){
                                                thiz.state.number_arr['kd'] = kdArr;

                                               var arr = [];
                                               arr.push(kdArr);
                                               count = this.exkuadu(arr);

                                            } else if (index == 3){
                                                thiz.state.number_arr['s'] = sArr;
                                                thiz.state.number_arr['g'] = gArr;
                                                count = sArr.length * gArr.length ;

                                           }


                                           thiz.state.zhushu = count + "注";
                                           thiz.state.amount = count*2*parseInt(thiz.state.beishu) + "元";
                                           thiz.state.count = count;

                                           this.props.onPress();
                                       })
                                   }}>
                    <Text style={selected?styles.stouchButtonText: styles.touchButtonText}>{title}</Text>
                </TouchableOpacity>
            );

    }
}


class CustomHeader extends Component {
    constructor() {
        super();
        this.state = {

        };
    }


    itemClick(){
        thiz.setState({

        })
    }


    render() {

        const { title,style,ishz,index} = this.props;
        thishead_arr[index+title] = this;

            return (
                <View  style={{flexDirection: 'row', marginTop: style.marginTop}}>
                    <Text style={{
                        color: sys.greenColor,
                        lineHeight: 30,
                        width: RIGHT_WIDTH / 6,
                        height: RIGHT_WIDTH / 7,
                        fontSize: 18,
                        paddingLeft: 4,
                        marginBottom: 0,
                        textAlign: 'center'
                    }}>{title}</Text>
                    <CustomButton index={index} onPress={this.itemClick} type="2" ref={index+title + '大'} id={index+title} title="大"
                                  style={styles.customHeadBtn}/>
                    <CustomButton index={index} onPress={this.itemClick} type="2" ref={index+title + '小'} id={index+title} title="小"
                                  style={styles.customHeadBtn}/>
                    <CustomButton index={index} onPress={this.itemClick} type="2" ref={index+title + '单'} id={index+title} title="单"
                                  style={styles.customHeadBtn}/>
                    <CustomButton index={index} onPress={this.itemClick} type="2" ref={index+title + '双'} id={index+title} title="双"
                                  style={styles.customHeadBtn}/>
                    <CustomButton index={index} onPress={this.itemClick} type="2" ref={index+title + '全'} id={index+title} title="全"
                                  style={styles.customHeadBtn}/>

                </View>
            );
    }
}











export default class TwoStart extends React.Component {


    _onPress = () => {
        this.props.onPressItem(this.props.id);
    };


    constructor(props) {
        super(props);

        this.state = {

            fontLoaded: false,

            number_arr:{},

            zhushu : "0注",
            amount:"0元",
            count:0,
            index: 0,
            beishu:'1',

            //后二跨度
            kuaduhe:{},
            //前二跨度
            kuaduqe:{},
            //后二直选和值
            zhixhzhe:{},
             //前二直选和值
            zhixhzqe:{},


             //前二直选复式
             exzhixfsq:{},
             //后二直选复式
             exzhixfsh:{},



            ///后二大小单双
            dxdshe:{},
            //前二大小单双
            dxdsqe:{},
            //后二直选单式
            exzhixdsh:{},
            //前二直选单式
            exzhixdsq:{},



            //后二组选单式
            exzuxdsh:{},
            //前二组选单式
            exzuxdsq:{},


            //后二组选复式
            exzuxfsh:{},
            //前二组选复式
            exzuxfsq:{},

            //前二组选包胆
            zuxcebd:{},


            //后二组选包胆
            zuxhebd:{},
            //后二组选和值
            zuxhzhe:{},
            //前二组选和值
            zuxhzqe:{},

            currFullExpect:""
        };

    }




    async componentDidMount() {
        this.setState({ fontLoaded: true });

        this.setState({ currFullExpect: this.props.currFullExpect });


        selectedIndex = 0;


        if(this.props.datalist["exzhixfsq"] != null){
            this.setState({ exzhixfsq: this.props.datalist["exzhixfsq"] });

        }

        if(this.props.datalist["zhixhzqe"] != null){
            this.setState({ zhixhzqe: this.props.datalist["zhixhzqe"] });
        }



        if(this.props.datalist["kuaduqe"] != null){
            this.setState({ kuaduqe: this.props.datalist["kuaduqe"] });
        }


        if(this.props.datalist["exzhixfsh"] != null){
            this.setState({ exzhixfsh: this.props.datalist["exzhixfsh"] });
        }


        if(this.props.datalist["zhixhzhe"] != null){
            this.setState({ zhixhzhe: this.props.datalist["zhixhzhe"] });
        }


        if(this.props.datalist["kuaduhe"] != null){
            this.setState({ kuaduhe: this.props.datalist["kuaduhe"] });
        }

    }


      //生成随机订单号
    generateMixed(n) {

        var chars = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];

        var res = "";
        for(var i = 0; i < n ; i ++) {
            var id = Math.ceil(Math.random()*35);
            res += chars[id];
        }
        return res;
    }






    buynow(){


        let isCunZai = this.props.datalist.hasOwnProperty('exzhixfsq')

        if (!isCunZai) {
            this.props.lodaData()
         //   return;
        }

        if(thiz.state.count == 0){
       
            this.refs.toast.show("您的选注不符合规则", DURATION.LENGTH_LONG);   
            return;

        }

        if(thiz.state.beishu == '0' || thiz.state.beishu == ''){
            this.refs.toast.show("请填写下注倍数", DURATION.LENGTH_LONG);
            return;
        }

        var number = "";

        var data = {};


        if(this.state.index == 0){
            data = this.state.exzhixfsq;
            number = thiz.state.number_arr['w'] + "|" + thiz.state.number_arr['q'];
        }else  if (this.state.index == 1){
            data = this.state.zhixhzqe;
            number = thiz.state.number_arr['hz'] + "";
        }else  if (this.state.index == 2) {
            data = this.state.kuaduqe;
            number = thiz.state.number_arr['kd']+ "";
        } else if(this.state.index == 3){
            data = this.state.exzhixfsh;
            number = thiz.state.number_arr['s'] + "|" + thiz.state.number_arr['g'];
        }else  if (this.state.index == 4){
            data = this.state.zhixhzhe;
            number = thiz.state.number_arr['hz']+ "";
        }else  if (this.state.index == 5) {
            data = this.state.kuaduhe;
            number = thiz.state.number_arr['kd']+ "";
        }

        this.setState({

            data : data,
            number : number

        },()=>{
            this.props.onPress();

            // this.clear()
        });



    }





    show(tag){

    }


    onButtonPress(index){



        console.log(index+'----'+selectedIndex)
        if (index == thiz.state.index){

          return;

        }




           this.setState({
               index:index,
               zhushu:"0注",
               amount:"0元",
               count : 0,
               beishu:'1',
               number_arr : [],
           },()=>{

               for(var key in thiz.refs){
                //   if(thiz.refs[key].state.selected != null && key.substr(0,4) != "left"){
                    //hzyy
                 if ((key.indexOf('位') != -1) || (key.indexOf('和值') != -1) || (key.indexOf('跨度') != -1)){

                    thiz.refs[key].setState({
                        selected:false
                    });
                 }

                 if(key.includes('header')){//customheader
                    for(var subkey in thiz.refs[key].refs){


                        if (subkey.includes('大') || subkey.includes('小')
                        || subkey.includes('单') || subkey.includes('双')
                        || subkey.includes('全')) {
                            thiz.refs[key].refs[subkey].setState({
                                selected:false
                            });
                        }

                        
                    }
                 }
               }

               console.log(selectedIndex+'----')
               if(selectedIndex != this.state.index){
                   thiz.refs["left"+selectedIndex].setState({
                       selected: false
                   });
                   selectedIndex = this.state.index;
                   thiz.refs["left"+selectedIndex].setState({
                       selected: true
                   });
               }

               console.log(selectedIndex+'----')
           })
    };


    itemClick(){
            this.setState({
                index:thiz.state.index,
                zhushu:thiz.state.zhushu,
                amount : thiz.state.amount,
                count:thiz.state.count,
                beishu:thiz.state.beishu
            })
    }


    clear(){ 
               
        for(key in thiz.refs){
            if(key.includes('万位') || key.includes('千位')|| key.includes('跨度')|| key.includes('和值')|| key.includes('十位')|| key.includes('个位')){
              thiz.refs[key].setState({
                  selected:false
                })
            }
  
            if(key.includes('header') ){
  
                
              for(keys in thiz.refs[key].refs){
                // console.log(keys)
                  thiz.refs[key].refs[keys].setState({
                      selected:false
                    })
              }
  
            }
        }
          
      }
  

    render(){
           thiz = this;


           var  zhushu  = thiz.state.zhushu ;
           var  amount = thiz.state.amount;

           var remark = "";
           var rate = 0;



        let isCunZai = this.props.datalist.hasOwnProperty('exzhixfsq')

        var titleArr = [];

           if(this.state.index == 0){     //前二直选复式

               if(this.props.datalist["exzhixfsq"] != null){


                   remark = this.state.exzhixfsq.remark;
                   rate = this.state.exzhixfsq.rate;
               }


               titleArr = qeTitle_arr;

           }else if(this.state.index == 1){        //前二直选和值

               if(this.props.datalist["zhixhzqe"] != null){
                   remark = this.state.zhixhzqe.remark;
                   rate = this.state.zhixhzqe.rate;
               }

               titleArr =  hezhi_arr;

           }else if(this.state.index == 2){      //前二跨度

               if(this.props.datalist["kuaduqe"] != null){

                   remark = this.state.kuaduqe.remark;
                   rate = this.state.kuaduqe.rate;
               }

               titleArr = kuadu_arr;
           }else if(this.state.index == 3){      //后二直选复式

               if(this.props.datalist["exzhixfsh"] != null){

                   remark = this.state.exzhixfsh.remark;
                   rate = this.state.exzhixfsh.rate;
               }

               titleArr = heTitle_arr;

            }else if(this.state.index == 4){       //  后二直选和值

                if(this.props.datalist["zhixhzhe"] != null){
                    remark = this.state.zhixhzhe.remark;
                    rate = this.state.zhixhzhe.rate;
                }
                 titleArr =  hezhi_arr;

             }else if(this.state.index == 5){       //  后二跨度

                 if(this.props.datalist["kuaduhe"] != null){
                     remark = this.state.kuaduhe.remark;
                     rate = this.state.kuaduhe.rate;
                 }

                  titleArr =  kuadu_arr;
             }


           // alert(zhushu);
            var zxfsView = null;
            var zxhzView = null;
            var kdView = null;

           if(this.state.index == 0 || this.state.index == 3){
               zxfsView = titleArr.map((info, index)=> {
                   return (
                       <View key={index} >
                           <CustomHeader key={index} ref={'header'+index} index={this.state.index} title={info}
                                         style={{marginTop: 20, backgroundColor: 'red'}} ></CustomHeader>
                           <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="0" id={info} ref={this.state.index + info + 0}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="1" id={info} ref={this.state.index + info + 1}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="2" id={info} ref={this.state.index + info + 2}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="3" id={info} ref={this.state.index + info + 3}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="4" id={info} ref={this.state.index + info + 4}/>
                           </View>
                           <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="5" id={info} ref={this.state.index + info + 5}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="6" id={info} ref={this.state.index + info + 6}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="7" id={info} ref={this.state.index + info + 7}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="8" id={info} ref={this.state.index + info + 8}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="9" id={info} ref={this.state.index + info + 9}/>
                           </View>
                       </View>
                   );
               })
           }else if(this.state.index == 1 || this.state.index == 4){
               zxhzView = titleArr.map((info, index)=> {
                   return (
                       <View key={index} >
                           <CustomHeader key={index} ref={'header'+index} index={this.state.index}  title={info} 
                                         style={{marginTop: 20, backgroundColor: 'red'}} id={this.state.index} ></CustomHeader>


                            <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="0" id={info} ref={this.state.index + info + 0}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="1" id={info} ref={this.state.index  + info + 1}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="2" id={info} ref={this.state.index + info + 2}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="3" id={info} ref={this.state.index + info + 3}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="4" id={info} ref={this.state.index + info + 4}/>
                            </View>

                            <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="5" id={info} ref={this.state.index + info + 5}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="6" id={info} ref={this.state.index + info + 6}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="7" id={info} ref={this.state.index + info + 7}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="8" id={info} ref={this.state.index + info + 8}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="9" id={info} ref={this.state.index + info + 9}/>
                            </View>

                            <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="10" id={info} ref={this.state.index +info + 10}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="11" id={info} ref={this.state.index +info + 11}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="12" id={info} ref={this.state.index +info + 12}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="13" id={info} ref={this.state.index +info + 13}/>
                                <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="14" id={info} ref={this.state.index +info + 14}/>
                            </View>

                           <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                               <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="15" id={info} ref={this.state.index +info + 15}/>
                               <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="16" id={info} ref={this.state.index +info + 16}/>
                               <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="17" id={info} ref={this.state.index +info + 17}/>
                               <CustomButton index={this.state.index} type="1" onPress={this.itemClick.bind(this, info)} title="18" id={info} ref={this.state.index +info + 18}/>
                           </View>



                       </View>
                   )
               })
           } else if(this.state.index == 2 || this.state.index == 5) {
               kdView = titleArr.map((info, index)=> {
                   return (
                       <View key={index} >
                           <CustomHeader key={index} ref={'header'+index} index={this.state.index} title={info}
                                         style={{marginTop: 20, backgroundColor: 'red'}} id={this.state.index} ></CustomHeader>


                           <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="0" id={info}
                                             ref={this.state.index +info + 0}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="1" id={info}
                                             ref={this.state.index +info + 1}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="2" id={info}
                                             ref={this.state.index +info + 2}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="3" id={info}
                                             ref={this.state.index +info + 3}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="4" id={info}
                                             ref={this.state.index +info + 4}/>
                           </View>

                           <View style={{flexDirection: 'row', marginTop: 10, marginLeft: 0}}>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="5" id={info}
                                             ref={this.state.index +info + 5}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="6" id={info}
                                             ref={this.state.index +info + 6}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="7" id={info}
                                             ref={this.state.index +info + 7}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="8" id={info}
                                             ref={this.state.index +info + 8}/>
                               <CustomButton index={this.state.index} onPress={this.itemClick.bind(this, info)} title="9" id={info}
                                             ref={this.state.index +info + 9}/>
                           </View>

                       </View>
                   )
               })
           }



           var changeView = null;

           if(this.state.index == 0 || this.state.index == 3){
                changeView  = zxfsView;
           }else  if(this.state.index == 1 || this.state.index == 4){
                changeView  = zxhzView;
           }else {
               changeView = kdView;
           }

         var scrollH = sys.zhongjianIsHaveChange;
        // var scrollH = sys.dheight-310;
        // if(isIphoneX()){
        //     scrollH = sys.dheight-320;
        // }



        let rarmkView = isCunZai?<Text style={styles.remarkHeader}>{remark}赔率
       <Text style={{color:'red'}}>{rate}</Text>倍</Text>:<NoDataView click={()=>this.props.lodaData()}
             isloading = {this.props.visible}
             text = {"重新加载"}></NoDataView>

           return (

               <KeyboardAwareScrollView
                   style={styles.container}
                   keyboardShouldPersistTaps = {"always"}

               >

               <View style={{flex:1}}>

                   <View style={{ flex: 1 ,flexDirection:'row'}}>

                       <ScrollView style={{
                           backgroundColor:sys.grayColor,
                           width:LEFT_WIDTH,
                           height:scrollH}}>

                           {text_arr.map((info, index) => {

                               var selected = false;
                               if (this.state.index == index){
                                   selected = true;
                               }

                               return (
                                   <LeftButton key={index}  xuanzo={index==0?1:0} title={info}    index={index} selected={selected} ref={"left"+index}
                                               onPress={()=>{
                                                   this.onButtonPress(index)
                                               }}></LeftButton>
                               );
                           })}
                       </ScrollView>
                       <ScrollView style={{backgroundColor:"white", width:RIGHT_WIDTH, height:scrollH}}>
                           {/* <Text style={styles.remarkHeader}>{remark}赔率<Text style={{color:'red'}}>{rate}</Text>倍</Text> */}
                           {rarmkView}
                           {
                              changeView
                           }
                           <View style={{height:50}}></View>
                       </ScrollView>
                   </View>





                   <View style={styles.beishuView} >

                       <TouchableOpacity  style={styles.reduceBtn }
                                          onPress={() => {


                                            if (thiz.state.beishu == '' || this.state.beishu == null) {
                                                thiz.setState({
                                                    beishu : '',
                                                
                                                })
                                                return;
                                            }

                                              if(thiz.state.beishu == '1'){
                                                  return;
                                              }else {



                                                  var mewBeishu = parseInt(thiz.state.beishu) - 1;


                                                  thiz.setState({
                                                      beishu : mewBeishu+'',
                                                      amount :  thiz.state.count*2*mewBeishu + "元"
                                                  })

                                              }
                                          }}
                       >
                           <Text style={styles.payButtonText} >-</Text>
                       </TouchableOpacity>




                       <TextInput underlineColorAndroid='transparent' value={thiz.state.beishu}
                                  keyboardType='numeric'  style={styles.beishuCount}  ref="beishucount"
                                  onChangeText={(text) =>{
                                    text = text.replace(/[^\d]+/, '');
                                      thiz.setState({
                                          beishu:text,
                                          amount : thiz.state.count*2*parseInt(text) + "元"
                                      })

                                      if(text == '' || text == null){

                                      thiz.setState({
                                      amount : "0元"
                                  })
                                  }
                                  }

                       }
                       ></TextInput>


                       <TouchableOpacity  style={styles.reduceBtn }
                                          onPress={() => {


                                              var mewBeishu = parseInt(thiz.state.beishu) + 1;
                                              if(thiz.state.beishu == '' ){
                                                  mewBeishu = 1;
                                              }


                                              thiz.setState({
                                                  beishu : mewBeishu+'',
                                                  amount :  thiz.state.count*2*mewBeishu + "元"
                                              })




                                          }}
                       >
                           <Text style={styles.payButtonText}>+</Text>
                       </TouchableOpacity>

                   </View>

                   <View style={styles.footer} >
                       <View style={styles.yuerbar}>
                           <Text style={styles.nameHeader}>总额</Text>
                           <Text style={styles.yuer}>{amount}</Text>
                       </View>
                       <View style={styles.yuerbar}>
                           <Text style={styles.nameHeader}>单注：</Text>
                           <Text style={styles.yuer}>2元</Text>
                           {/*<FormInput style={styles.yuer} placeholder="111" />*/}
                       </View>
                       <View style={styles.yuerbar}>
                           <Text style={styles.nameHeader}>共</Text>
                           <Text style={styles.yuer}>{zhushu}</Text>
                       </View>

                       <TouchableOpacity  style={styles.payButton }
                                          onPress={() => {
                           this.buynow()
                                          }}
                       >

                           <Text style={styles.payButtonText}>下注</Text>
                       </TouchableOpacity>

                   </View>

               </View>

               <Toast  //提示
                    ref="toast"
                    style={{backgroundColor:'gray'}}
                    position='top'
                    positionValue={200}
                    opacity={0.7}
                    textStyle={{color:'white'}}
                /> 

               </KeyboardAwareScrollView>
           );
       }


}
