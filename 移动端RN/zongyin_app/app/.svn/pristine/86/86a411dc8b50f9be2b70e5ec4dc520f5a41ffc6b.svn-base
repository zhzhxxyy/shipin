import _ from 'lodash';

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    Dimensions,
    ScrollView, SafeAreaView,
    Button,
    TouchableOpacity
} from 'react-native';
// import {Button } from 'react-native-elements';

// import { Font } from 'expo';
import {sys} from "../common/Data";
// import {FormInput} from "./login/screen2";

const RIGHT_WIDTH = Dimensions.get('window').width*0.75;
const LEFT_WIDTH = Dimensions.get('window').width*0.25;
const SCREEN_WIDTH = Dimensions.get('window').width;
const  text_arr = ["定位胆","大小单双"];
const  title_arr = ["万位","千位","百位","十位","个位"];


var thiz = this;
var thishead_arr = [];
class CustomButton extends Component {

    constructor() {
        super();
        this.state = {
            selected: false,
            dwd:false,
            dxds:false
        };
    }

    render() {
        var { title,style,xuanzo } = this.props;
        if(style==undefined){
            style = {backgroundColor:sys.redColor,borderRadius:RIGHT_WIDTH/14,
                width:RIGHT_WIDTH/7,height:RIGHT_WIDTH/7,marginLeft: (RIGHT_WIDTH-RIGHT_WIDTH/7*5)/6}
        }
        if(xuanzo==1)this.state.selected=true;

        const { selected } = this.state;
    
        return (
            


            <Button
                title={title}
                titleStyle={{ fontSize: 15, color: selected?sys.whiteColor:sys.subTitleColor, fontFamily: 'regular' }}
                color={selected?"yellow":"red"}
                containerStyle={{ marginLeft: style.marginLeft}}
                onPress={() =>
                {

                    var arr = []
                    if(this.props.title=='大'){
                        arr = [5,6,7,8,9]
                    }else if(this.props.title=='小'){
                        arr = [0,1,2,3,4]
                    }else if(this.props.title=='单'){
                        arr = [1,3,5,7,9]
                    }else if(this.props.title=='双'){
                        arr = [0,2,4,6,8]
                    }else if(this.props.title=='全'){
                        arr = [0,1,2,3,4,5,6,7,8,9]
                    }

                    if(arr.length>0){
                        for(var key in thishead_arr[this.props.id].refs){
                            thishead_arr[this.props.id].refs[key].setState({
                                selected:false
                            });
                        }

                        [0,1,2,3,4,5,6,7,8,9].map((text,index)=>{
                            let reid = this.props.id;
                            let res = reid+text;
                            let headres = reid+this.props.title;
                            thiz.refs[res].setState({selected:false})
                        })
                        arr.map((text,index)=>{
                            let reid = this.props.id;
                            let res = reid+text;
                            let headres = reid+this.props.title;
                            thiz.refs[res].setState({selected:!selected})

                            //thishead.refs[headres].setState({selected:false})

                        })
                    }

                    this.setState({ selected: !selected } ,() => {
                        //这里打印的是最新的state值
                        let wArr = []
                        let qArr = []
                        let bArr = []
                        let sArr = []
                        let gArr = []
                        for(var key in thiz.refs){
                            if(thiz.refs[key].state.selected){
                                if(!isNaN(key.substr(2,1))){
                                    if(key.substr(0,2)=='万位'){
                                        wArr.push(key.substr(2,1));
                                    }else if(key.substr(0,2)=='千位'){
                                        qArr.push(key.substr(2,1));
                                    }else if(key.substr(0,2)=='百位'){
                                        bArr.push(key.substr(2,1))
                                    }else if(key.substr(0,2)=='十位'){
                                        sArr.push(key.substr(2,1));
                                    }else if(key.substr(0,2)=='个位'){
                                        gArr.push(key.substr(2,1))
                                    }
                                }
                            }
                        }
                        thiz.state.number_arr['w'] = wArr;
                        thiz.state.number_arr['q'] = qArr;
                        thiz.state.number_arr['b'] = bArr;
                        thiz.state.number_arr['s'] = sArr;
                        thiz.state.number_arr['g'] = gArr;
                        console.log(thiz.state.number_arr);
                    })
                }}
            />
        );
    }
}

class CustomHeader extends Component {
    constructor() {
        super();
        this.state = {
            selected: false,
        };
    }

    render() {

        const { title,style} = this.props;
        const { selected } = this.state;
        thishead_arr[title] = this;
        return (
            <View style={{flexDirection:'row',marginTop:style.marginTop}}>
                <Text style={{
                    color:sys.greenColor,
                    lineHeight:RIGHT_WIDTH/7,
                    width:RIGHT_WIDTH/6,
                    height:RIGHT_WIDTH/7,
                    fontSize:18,
                    paddingLeft: 4,
                    marginBottom:10,
                }}>{title}</Text>
                <CustomButton ref={title+'大'} id={title} title="大 5" style={styles.customHeadBtn}/>
                <CustomButton ref={title+'小'} id={title} title="小5" style={styles.customHeadBtn}/>
                <CustomButton ref={title+'单'} id={title} title="单5" style={styles.customHeadBtn}/>
                <CustomButton ref={title+'双'} id={title} title="双5" style={styles.customHeadBtn}/>
                <CustomButton ref={title+'全'} id={title} title="全5" style={styles.customHeadBtn}/>

            </View>
        );
    }
}


export default class lottery_detail extends Component{



    static  navigationOptions = ({navigation}) => {
        const { params } = navigation.state;


        return{
            headerTitle: (
                <Text h3 style={{ flex: 1, textAlign: 'center' ,fontSize:20}}>{params?params.title1:"123"}</Text>
            ),
            // headerLeft: (
            //     <Icon
            //         name="menu"
            //         size={30}
            //         type="entypo"
            //         containerStyle={{ marginLeft: 10 }}
            //         onPress={() => navigation.navigate('DrawerOpen')}
            //     />
            // ),
            headerTitleStyle:{
                alignSelf:'center',
                flex: 1,
                textAlign: 'center',
                backgroundColor:sys.mainColor
            },
            headerRight: <View />

         
        }
    };

    constructor(props) {
        super(props);

        this.state = {
            fontLoaded: false,
            number_arr:{},

        };
    }

    async componentDidMount() {
        // await Font.loadAsync({
        //     georgia: require('../../assets/fonts/Georgia.ttf'),
        //     regular: require('../../assets/fonts/Montserrat-Regular.ttf'),
        //     light: require('../../assets/fonts/Montserrat-Light.ttf'),
        //     bold: require('../../assets/fonts/Montserrat-Bold.ttf'),
        // });

        this.setState({ fontLoaded: true });
    }


    render(){
        thiz = this;

        return (
            <SafeAreaView style={styles.container}>

                    <View style={{flex:1}}>

                        <View style={{ flex: 1 ,flexDirection:'row'}}>

                            <ScrollView

                                style={{

                                    backgroundColor:sys.whiteColor,
                                    width:LEFT_WIDTH
                                }}>

                                {text_arr.map((info, index) => {
                                    return (
                                        <CustomButton xuanzo={index==0?1:0} key={index} title={info} style={styles.leftBtn}/>
                                    );
                                })}
                            </ScrollView>
                            <ScrollView
                                style={{
                                    backgroundColor:sys.mainColor,
                                    width:RIGHT_WIDTH
                                }}
                            >
                                {title_arr.map((info,index)=>{
                                    return (
                                        <View key={index}>
                                            <CustomHeader title={info} style={{marginTop: 20,backgroundColor:'red'}}></CustomHeader>
                                            <View style={{flexDirection: 'row',marginTop:10}}>
                                                <CustomButton title="0" id={info} ref={info+0} />
                                                <CustomButton title="1" id={info} ref={info+1} />
                                                <CustomButton title="2" id={info} ref={info+2} />
                                                <CustomButton title="3" id={info} ref={info+3} />
                                                <CustomButton title="4" id={info} ref={info+4} />
                                            </View>
                                            <View style={{flexDirection: 'row',marginTop:10}}>
                                                <CustomButton title="5" id={info} ref={info+5} />
                                                <CustomButton title="6" id={info} ref={info+6} />
                                                <CustomButton title="7" id={info} ref={info+7} />
                                                <CustomButton title="8" id={info} ref={info+8} />
                                                <CustomButton title="9" id={info} ref={info+9} />
                                            </View>
                                        </View>
                                    );
                                })}
                            </ScrollView>
                        </View>
                        <View style={styles.footer} >
                            <View style={styles.yuerbar}>
                                <Text style={styles.nameHeader}>余额</Text>
                                <Text style={styles.yuer}>199</Text>
                            </View>
                            <View style={styles.yuerbar}>
                                <Text style={styles.nameHeader}>单注：</Text>
                                {/*<FormInput style={styles.yuer} placeholder="111" />*/}
                            </View>
                            <View style={styles.yuerbar}>
                                <Text style={styles.nameHeader}>共</Text>
                                <Text style={styles.yuer}>199注</Text>
                            </View>
                        </View>

                    </View>


            </SafeAreaView>
        );
    }
}

const styles = StyleSheet.create({
    container:{
        flex:1,
        alignItems: 'center',
        justifyContent:'center'
    },
    customHeadBtn:{
        backgroundColor:sys.greenColor,
        borderRadius:5,
        width:RIGHT_WIDTH/7,
        height:RIGHT_WIDTH/7,
        marginLeft:(RIGHT_WIDTH-RIGHT_WIDTH/7*6)/7
    },
    leftBtn:{
        backgroundColor:sys.purpleColor,
        borderRadius:5,
        width:LEFT_WIDTH,
        height:40,
        marginLeft:0
    },
    footer: {
        height: 60,
        width: SCREEN_WIDTH,
        flexDirection:'row'
    },
    yuerbar: {
        height: 60,
        width: SCREEN_WIDTH/4,
        justifyContent: 'center',
        alignContent: 'center',
    },
    nameHeader: {
        color: sys.subTitleColor,
        fontSize: 16,
        // fontFamily: 'regular',
        textAlign: 'center'
    },
    yuer:{
        color:sys.redColor,
        fontSize: 17,
        textAlign: 'center'
    }
});
