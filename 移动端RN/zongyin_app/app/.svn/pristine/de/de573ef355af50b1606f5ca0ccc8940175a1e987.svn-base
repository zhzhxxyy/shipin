
import React,{Component} from 'react';
import {
    View,
    Text,
    StyleSheet,
    Image,
    TextInput,
    FlatList,
    TouchableOpacity,
    AsyncStorage,
    Alert,

    Switch,
    Button,
    ImageBackground,
    Dimensions,
    Platform,
    ScrollView
     
} from 'react-native';



import {sys,NoDataView,isIphoneX} from "../../common/Data"


import {LeftButton} from "./CqsscPublic"
import {styles} from "../common/homeStyle"

import { Header } from 'react-navigation';

import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
import Toast,{DURATION} from 'react-native-easy-toast';//导入弹出框组件

import HttpUtils from "../../common/HttpUtil"


const host = sys.host;
const RIGHT_WIDTH = Dimensions.get('window').width*0.75;
const LEFT_WIDTH = Dimensions.get('window').width*0.25;
const SCREEN_WIDTH = Dimensions.get('window').width;
const  text_arr = ["定位胆","大小单双"];
const  title_arr = ["万位","千位","百位","十位","个位"];
const  dxdsTitle_arr = ["万位","千位","百位","十位","个位","总和","龙虎"];


var Buffer = require('buffer').Buffer;



var thiz = this;
var headthis;
var thishead_arr = [];

var selectedIndex = 0;





class CustomButton extends Component {

    constructor() {
        super();
        this.state = {

            selected: false,
            dwd:{},
            dxds:{}
        };
    }






    render() {
        var { title,style,xuanzo,type  } = this.props;

        if(style==undefined){
            style = {backgroundColor:sys.redColor,borderRadius:RIGHT_WIDTH/14,
                width:RIGHT_WIDTH/7,height:RIGHT_WIDTH/7,marginLeft: (RIGHT_WIDTH-RIGHT_WIDTH/7*5)/6}
        }


        if(xuanzo==1)this.state.selected=true;

        const { selected } = this.state;



        if(type == 1){
            return (

                <TouchableOpacity  style={[selected?styles.stouchButton : styles.touchButton,
                    {margin:0, marginLeft:(RIGHT_WIDTH*5/6-120)/5,marginTop:2}]}
                                   onPress={() => {

                                       this.setState({ selected: !selected } ,() => {
                                           //这里打印的是最新的state值
                                           let wArr = [];
                                           let qArr = [];
                                           let bArr = [];
                                           let sArr = [];
                                           let gArr = [];
                                           let zArr = [];
                                           let lArr = [];


                                           for(var object in thishead_arr){
                                               for (var key in thishead_arr[object].refs){
                                                   if (thishead_arr[object].refs[key].state.selected){
                                                       if(key.substr(0,2)=='万位'){
                                                           wArr.push(key.substr(2,1));
                                                       }else if(key.substr(0,2)=='千位'){
                                                           qArr.push(key.substr(2,1));
                                                       }else if(key.substr(0,2)=='百位'){
                                                           bArr.push(key.substr(2,1))
                                                       }else if(key.substr(0,2)=='十位'){
                                                           sArr.push(key.substr(2,1));
                                                       }else if(key.substr(0,2)=='个位'){
                                                           gArr.push(key.substr(2,1))
                                                       }else if(key.substr(0,2)=='总和'){
                                                           zArr.push(key.substr(2,1))
                                                       }else if(key.substr(0,2)=='龙虎'){
                                                           lArr.push(key.substr(2,1))
                                                       }
                                                   }
                                               }
                                           }

                                           thiz.state.number_arr['w'] = wArr;
                                           thiz.state.number_arr['q'] = qArr;
                                           thiz.state.number_arr['b'] = bArr;
                                           thiz.state.number_arr['s'] = sArr;
                                           thiz.state.number_arr['g'] = gArr;
                                           thiz.state.number_arr['z'] = zArr;
                                           thiz.state.number_arr['l'] = lArr;

                                           var count = wArr.length + qArr.length + bArr.length + sArr.length + gArr.length + zArr.length + lArr.length ;
                                           thiz.state.zhushu = count + "注";
                                           thiz.state.amount = count*sys.priceNum*thiz.state.beishu + "元";
                                           thiz.state.count = count;

                                           this.props.onPress();

                                       })
                                   }}>
                    <Text style={selected?styles.stouchButtonText: styles.touchButtonText}>{title}</Text>
                </TouchableOpacity>



            );

        }else if (type == 2) {
            return (

                <TouchableOpacity  style={[selected?styles.stouchButton : styles.touchButton,
                    {margin:0,marginLeft:(RIGHT_WIDTH*5/6-150)/6,marginTop:2}]}
                                   onPress={() => {
                                       var arr = [];
                                       if(this.props.title=='大'){
                                           arr = [5,6,7,8,9]
                                       }else if(this.props.title=='小'){
                                           arr = [0,1,2,3,4]
                                       }else if(this.props.title=='单'){
                                           arr = [1,3,5,7,9]
                                       }else if(this.props.title=='双'){
                                           arr = [0,2,4,6,8]
                                       }else if(this.props.title=='全'){
                                           arr = [0,1,2,3,4,5,6,7,8,9]
                                       }

                                       if(arr.length>0){
                                           for(var key in thishead_arr[this.props.id].refs){
                                               thishead_arr[this.props.id].refs[key].setState({
                                                   selected:false
                                               });
                                           }

                                           [0,1,2,3,4,5,6,7,8,9].map((text,index)=>{
                                               let reid = this.props.id;
                                               let res = reid+text;
                                               let headres = reid+this.props.title;
                                               thiz.refs[res].setState({selected:false})
                                           })

                                           arr.map((text,index)=>{
                                               let reid = this.props.id;
                                               let res = reid+text;
                                               let headres = reid+this.props.title;
                                               thiz.refs[res].setState({selected:!selected})

                                           })
                                       }

                                       this.setState({ selected: !selected } ,() => {
                                           //这里打印的是最新的state值
                                           let wArr = [];
                                           let qArr = [];
                                           let bArr = [];
                                           let sArr = [];
                                           let gArr = [];
                                           for(var key in thiz.refs){

                                               


                                                if ((key.indexOf('位') != -1)) {

                                                    if(thiz.refs[key].state.selected){
                                                        if(!isNaN(key.substr(2,1))){
                                                            if(key.substr(0,2)=='万位'){
                                                                wArr.push(key.substr(2,1));
                                                            }else if(key.substr(0,2)=='千位'){
                                                                qArr.push(key.substr(2,1));
                                                            }else if(key.substr(0,2)=='百位'){
                                                                bArr.push(key.substr(2,1))
                                                            }else if(key.substr(0,2)=='十位'){
                                                                sArr.push(key.substr(2,1));
                                                            }else if(key.substr(0,2)=='个位'){
                                                                gArr.push(key.substr(2,1))
                                                            }
                                                        }
                                                    }
                                                }

                                           }

                                           thiz.state.number_arr['w'] = wArr;
                                           thiz.state.number_arr['q'] = qArr;
                                           thiz.state.number_arr['b'] = bArr;
                                           thiz.state.number_arr['s'] = sArr;
                                           thiz.state.number_arr['g'] = gArr;
                                           var count = wArr.length + qArr.length + bArr.length + sArr.length + gArr.length;
                                           thiz.state.zhushu = count + "注";
                                           thiz.state.amount = count*sys.priceNum*parseInt(thiz.state.beishu) + "元";
                                           thiz.state.count = count;

                                           this.props.onPress();
                                       })
                                   }}>
                    <Text style={selected?styles.stouchButtonText: styles.touchButtonText}>{title}</Text>
                </TouchableOpacity>


            );

        }else{
            return (

                <TouchableOpacity  style={[selected?styles.stouchButton : styles.touchButton,
                    {margin:0,marginLeft:(RIGHT_WIDTH-150)/6,marginTop:(RIGHT_WIDTH-150)/12}]}
                                   onPress={() => {
                                       var arr = [];
                                       if(this.props.title=='大'){
                                           arr = [5,6,7,8,9]
                                       }else if(this.props.title=='小'){
                                           arr = [0,1,2,3,4]
                                       }else if(this.props.title=='单'){
                                           arr = [1,3,5,7,9]
                                       }else if(this.props.title=='双'){
                                           arr = [0,2,4,6,8]
                                       }else if(this.props.title=='全'){
                                           arr = [0,1,2,3,4,5,6,7,8,9]
                                       }

                                       if(arr.length>0){
                                           for(var key in thishead_arr[this.props.id].refs){
                                               thishead_arr[this.props.id].refs[key].setState({
                                                   selected:false
                                               });
                                           }

                                           [0,1,2,3,4,5,6,7,8,9].map((text,index)=>{
                                               let reid = this.props.id;
                                               let res = reid+text;
                                               let headres = reid+this.props.title;
                                               thiz.refs[res].setState({selected:false})
                                           })

                                           arr.map((text,index)=>{
                                               let reid = this.props.id;
                                               let res = reid+text;
                                               let headres = reid+this.props.title;
                                               thiz.refs[res].setState({selected:!selected})

                                           })
                                       }

                                       this.setState({ selected: !selected } ,() => {
                                           //这里打印的是最新的state值
                                           let wArr = [];
                                           let qArr = [];
                                           let bArr = [];
                                           let sArr = [];
                                           let gArr = [];
                                           for(var key in thiz.refs){

                                               


                                                if ((key.indexOf('位') != -1)) {

                                                    if(thiz.refs[key].state.selected){
                                                        if(!isNaN(key.substr(2,1))){
                                                            if(key.substr(0,2)=='万位'){
                                                                wArr.push(key.substr(2,1));
                                                            }else if(key.substr(0,2)=='千位'){
                                                                qArr.push(key.substr(2,1));
                                                            }else if(key.substr(0,2)=='百位'){
                                                                bArr.push(key.substr(2,1))
                                                            }else if(key.substr(0,2)=='十位'){
                                                                sArr.push(key.substr(2,1));
                                                            }else if(key.substr(0,2)=='个位'){
                                                                gArr.push(key.substr(2,1))
                                                            }
                                                        }
                                                    }
                                                }

                                           }

                                           thiz.state.number_arr['w'] = wArr;
                                           thiz.state.number_arr['q'] = qArr;
                                           thiz.state.number_arr['b'] = bArr;
                                           thiz.state.number_arr['s'] = sArr;
                                           thiz.state.number_arr['g'] = gArr;
                                           var count = wArr.length + qArr.length + bArr.length + sArr.length + gArr.length;
                                           thiz.state.zhushu = count + "注";
                                           thiz.state.amount = count*sys.priceNum*parseInt(thiz.state.beishu) + "元";
                                           thiz.state.count = count;

                                           this.props.onPress();
                                       })
                                   }}>
                    <Text style={selected?styles.stouchButtonText: styles.touchButtonText}>{title}</Text>
                </TouchableOpacity>


            );
        }



    }
}


class CustomHeader extends Component {
    constructor() {
        super();
        this.state = {
            selected: false,
        };
    }


    itemClick(){

        thiz.setState({
            zhushu:thiz.state.zhushu,
            amount:thiz.state.amount,
            count:thiz.state.count
        })
    }


    render() {

        const { title,style} = this.props;
        thishead_arr[title] = this;

        return (
            <View style={{flexDirection:'row',marginTop:style.marginTop}}>
                <Text style={{
                    color:sys.greenColor,
                    lineHeight:30,
                    width:RIGHT_WIDTH/6,
                    height:RIGHT_WIDTH/7,
                    fontSize:18,
                    paddingLeft: 4,
                    marginBottom:0,
                    textAlign: 'center'
                }}>{title}</Text>
                <CustomButton onPress={this.itemClick} type="2" ref={title+'大'} id={title} title="大" style={styles.customHeadBtn}/>
                <CustomButton onPress={this.itemClick} type="2" ref={title+'小'} id={title} title="小" style={styles.customHeadBtn}/>
                <CustomButton onPress={this.itemClick} type="2" ref={title+'单'} id={title} title="单" style={styles.customHeadBtn}/>
                <CustomButton onPress={this.itemClick} type="2" ref={title+'双'} id={title} title="双" style={styles.customHeadBtn}/>
                <CustomButton onPress={this.itemClick} type="2" ref={title+'全'} id={title} title="全" style={styles.customHeadBtn}/>

            </View>
        );
    }
}




class DxdsHeader extends Component {
    constructor() {
        super();
        this.state = {
            selected: false,
        };
    }

    itemClick(){

        thiz.setState({
            zhushu:thiz.state.zhushu,
            amount : thiz.state.amount,
            count:thiz.state.count

        })
    }


    render() {



        const { title,style} = this.props;
        const { selected } = this.state;
        thishead_arr[title] = this;
        // headthis = this;
        if(title == "龙虎"){
            return (
                <View style={{flexDirection:'row',marginTop:style.marginTop}}>
                    <Text style={{
                        color:sys.greenColor,
                        lineHeight:30,
                        width:RIGHT_WIDTH/6,
                        height:RIGHT_WIDTH/7,
                        fontSize:18,
                        paddingLeft: 4,
                        marginBottom:0,
                        textAlign: 'center'
                    }}>{title}</Text>
                    <CustomButton onPress={this.itemClick} type="1" ref={title+'龙'} id={title} title="龙" style={styles.customHeadBtn} />
                    <CustomButton onPress={this.itemClick} type="1" ref={title+'虎'} id={title} title="虎" style={styles.customHeadBtn}/>
                    <CustomButton onPress={this.itemClick} type="1"  ref={title+'和'} id={title} title="和" style={styles.customHeadBtn}/>



                </View>
            )

        }else {
            return (
                <View style={{flexDirection:'row',marginTop:style.marginTop}}>
                    <Text style={{
                        color:sys.greenColor,
                        lineHeight:30,
                        width:RIGHT_WIDTH/6,
                        height:RIGHT_WIDTH/7,
                        fontSize:18,
                        paddingLeft: 4,
                        marginBottom:0,
                        textAlign: 'center'
                    }}>{title}</Text>
                    <CustomButton onPress={this.itemClick} type="1" ref={title+'大'} id={title} title="大" style={styles.customHeadBtn}/>
                    <CustomButton onPress={this.itemClick} type="1" ref={title+'小'} id={title} title="小" style={styles.customHeadBtn}/>
                    <CustomButton onPress={this.itemClick} type="1" ref={title+'单'} id={title} title="单" style={styles.customHeadBtn}/>
                    <CustomButton onPress={this.itemClick} type="1" ref={title+'双'} id={title} title="双" style={styles.customHeadBtn}/>
                </View>
            )

        }


    }
}




export default class one extends React.Component {


    constructor(props) {
        super(props);

        this.state = {



            fontLoaded: false,

            number_arr:{},

            zhushu : "0注",
            amount:"0元",
            count:0,
            index: 0,
            beishu:'1',


            ///一星复式
            dweid:{},
            //大小单双双定位胆
            dxdsdwd:{},



            currFullExpect:"",

            data:{},

            number : "",

        };
    }






    async componentDidMount() {

        this.setState({
            fontLoaded: true,

            currFullExpect: this.props.currFullExpect

        });


        console.log("------dweid----")
        console.log(this.props.datalist["dweid"])

        if(this.props.datalist["dweid"] != null){
            this.setState({ dweid: this.props.datalist["dweid"] });
        }


        if(this.props.datalist["dxdsdwd"] != null){
            this.setState({ dxdsdwd: this.props.datalist["dxdsdwd"] });
        }


        selectedIndex = 0;
    }


    //生成随机订单号
    generateMixed(n) {

        var chars = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];

        var res = "";
        for(var i = 0; i < n ; i ++) {
            var id = Math.ceil(Math.random()*35);
            res += chars[id];
        }
        return res;
    }




    buynow(){



        let isCunZai = this.props.datalist.hasOwnProperty('dweid')

        if (!isCunZai) {
            this.props.lodaData()
          //  return;
        }

        console.log(this.state.count)

        if(thiz.state.count == 0){
       
            this.refs.toast.show("您的选注不符合规则", DURATION.LENGTH_LONG);   
            return;
        }

        if(thiz.state.beishu == '0' || thiz.state.beishu == ''){
            this.refs.toast.show("请填写下注倍数", DURATION.LENGTH_LONG);
            return;
        }


        var number = thiz.state.number_arr['w'] + "|" + thiz.state.number_arr['q'] + "|" + thiz.state.number_arr['b'] ;

        number = number + "|" + thiz.state.number_arr['s'] + "|" + thiz.state.number_arr['g'] ;

        var data = {};
        if(this.state.index == 0){

            data = this.state.dweid;
        }else  if (this.state.index == 1){
            data = this.state.dxdsdwd;
            number = number  + "|" + thiz.state.number_arr['z'] + "|" + thiz.state.number_arr['l'] ;
        }

        console.log("data:----");
        console.log(data);


        this.setState({

            data : data,
            number : number

        },()=>{
            this.props.onPress();
            // this.clear()
        });



    }


    show(tag){

    }


    onButtonPress(index){

       this.setState({
           index:index,
           zhushu:"0注",
           amount:"0元",
           count : 0,
           beishu:'1',
           number_arr : [],
       },()=>{

           if(selectedIndex != this.state.index){

               // thiz.onButtonPress(this.state.index);

               thiz.refs["left"+selectedIndex].setState({
                   selected: false
               });

               selectedIndex = this.state.index;

               thiz.refs["left"+selectedIndex].setState({
                   selected: true
               });
           }



       })



    };


    itemClick(info){

        // console.log("---------");
        // console.log(info);



        this.setState({

            index:thiz.state.index,
            zhushu:thiz.state.zhushu,
            amount : thiz.state.amount,
            count:thiz.state.count,
            beishu:thiz.state.beishu
        },()=>{})
    }


    clear(){ 
               
      for(key in thiz.refs){
          if(key.includes('万位') || key.includes('千位')|| key.includes('百位')|| key.includes('十位')|| key.includes('个位')){
            thiz.refs[key].setState({
                selected:false
              })
          }

          if(key.includes('CustomHeader') || key.includes('DxdsHeader')){

            for(keys in thiz.refs[key].refs){
                thiz.refs[key].refs[keys].setState({
                    selected:false
                  })
            }

          }
      }
        
    }



    render(){
        thiz = this;
        var  zhushu  = thiz.state.zhushu ;
        var  amount = thiz.state.amount;

        var remark = "玩法介绍";
        var rate = 0;

        let isCunZai = this.props.datalist.hasOwnProperty('dweid')

        if(this.state.index == 0){
            if(this.props.datalist["dweid"] != null){
                this.state.dweid = this.props.datalist["dweid"];
                remark = this.state.dweid.remark;
                rate = this.state.dweid.rate;
            }
        }else if(this.state.index == 1){
            if(this.props.datalist["dxdsdwd"] != null){
                this.state.dxdsdwd = this.props.datalist["dxdsdwd"];
                remark = this.state.dxdsdwd.remark;
                rate = this.state.dxdsdwd.rate;
            }
        }


        let changeView = null;
        if(this.state.index == 0){
            changeView = title_arr.map((info, index)=> {
                return (
                    <View key={index}>
                        <CustomHeader title={info}
                                      style={{marginTop: 20, backgroundColor: 'red'}}  ref={'CustomHeader' + index}  ></CustomHeader>
                        <View style={{flexDirection: 'row', marginTop: 10, marginLeft:0}}>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="0" id={info} ref={info + 0}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="1" id={info} ref={info + 1}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="2" id={info} ref={info + 2}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="3" id={info} ref={info + 3}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="4" id={info} ref={info + 4}/>
                        </View>
                        <View style={{flexDirection: 'row', marginTop: 10, marginLeft:0}}>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="5" id={info} ref={info + 5}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="6" id={info} ref={info + 6}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="7" id={info} ref={info + 7}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="8" id={info} ref={info + 8}/>
                            <CustomButton onPress={this.itemClick.bind(this, info)} title="9" id={info} ref={info + 9}/>
                        </View>
                    </View>
                );
            })
        }else if(this.state.index == 1){
            changeView = dxdsTitle_arr.map((info, index)=> {
                return (
                    <View key={index}>
                        <DxdsHeader title={info}
                                      style={{marginTop: 20, backgroundColor: 'red'}} ref={'DxdsHeader' + index}></DxdsHeader>
                    </View>
                );
            })
        }


        var scrollH = sys.zhongjianIsHaveChange;
        // var scrollH = sys.dheight-310;
        // if(isIphoneX()){
        //     scrollH = sys.dheight-320;
        // }

        

       let rarmkView = isCunZai?<Text style={styles.remarkHeader}>{remark}赔率
       <Text style={{color:'red'}}>{rate}</Text>倍</Text>:<NoDataView
       click={()=>this.props.lodaData()}
             isloading = {this.props.visible}
             text = {"重新加载"}></NoDataView>



        return (


            <KeyboardAwareScrollView
                style={styles.container}
                keyboardShouldPersistTaps = {"always"}

            >
                <View style={{ flex: 1 ,flexDirection:'row'}}>
                    <ScrollView
                        style={{
                            backgroundColor:sys.grayColor,
                            width:LEFT_WIDTH,
                            height:scrollH
                        }}>

                        {text_arr.map((info, index) => {

                            var selected = false;
                            if (this.state.index == index){
                                selected = true;
                            }

                            return (

                            <LeftButton  key={index} xuanzo={index==0?1:0} title={info}    index={index} selected={selected} ref={"left"+index}
                            onPress={()=>{
                                this.onButtonPress(index)
                            }}></LeftButton>


                            );
                        })}
                    </ScrollView>
                    <ScrollView
                        style={{
                            backgroundColor:"white",
                            width:RIGHT_WIDTH,
                            height:scrollH
                        }}
                    >

                        {rarmkView}
                        {
                           changeView
                        }


                        <View style={{height:50}}></View>
                    </ScrollView>
                </View>


                <View style={styles.footer} >
                    <View style={styles.yuerbar}>
                        <Text style={styles.nameHeader}>总额</Text>
                        <Text style={styles.yuer}>{amount}</Text>
                    </View>
                    <View style={styles.yuerbar}>
                        <Text style={styles.nameHeader}>单注：</Text>
                        <Text style={styles.yuer}>{sys.priceNum+'元'}</Text>
                        {/*<FormInput style={styles.yuer} placeholder="111" />*/}
                    </View>
                    <View style={styles.yuerbar}>
                        <Text style={styles.nameHeader}>共</Text>
                        <Text style={styles.yuer}>{zhushu}</Text>
                    </View>

                </View>


                <View style={styles.beishuView} >

                    <TouchableOpacity  style={[styles.reduceBtn,{marginLeft:30}]}
                                       onPress={() => {


                                            if (thiz.state.beishu == '' || thiz.state.beishu == null) {
                                                thiz.setState({
                                                    beishu : '',
                                                
                                                })
                                                return;
                                            }

                                           if(thiz.state.beishu == '1'){
                                               return;
                                           }else {
                                               var mewBeishu = parseInt(thiz.state.beishu) - 1;

                                               thiz.setState({
                                                   beishu : mewBeishu+'',
                                                   amount :  thiz.state.count*sys.priceNum*mewBeishu + "元"
                                               })

                                           }
                                       }}
                    >
                        <Text style={styles.payButtonText} >-</Text>
                    </TouchableOpacity>

                    {/*<Text underlineColorAndroid='transparent'   style={styles.beishuCount}  ref="beishucount">{thiz.state.beishu}</Text>*/}



                    <TextInput underlineColorAndroid='transparent' value={thiz.state.beishu}
                               keyboardType='numeric'  style={styles.beishuCount}  ref="beishucount"
                               onChangeText={(text) =>{

                                text = text.replace(/[^\d]+/, '');
                               
                                   thiz.setState({
                                       beishu:text,
                                       amount : thiz.state.count*sys.priceNum*parseInt(text) + "元"
                                   })

                                   if(text == '' || text == null){

                                   thiz.setState({
                                   amount : "0元"
                               })
                               }
                               }

                    }
                    ></TextInput>

                    <TouchableOpacity  style={styles.reduceBtn }
                                       onPress={() => {

                                           var mewBeishu = parseInt(thiz.state.beishu) + 1;
                                           if(thiz.state.beishu == '' ){
                                               mewBeishu = 1;
                                           }


                                           thiz.setState({
                                               beishu : mewBeishu+'',
                                               amount :  thiz.state.count*sys.priceNum*mewBeishu + "元"
                                           })



                                       }}
                    >
                        <Text style={styles.payButtonText}>+</Text>
                    </TouchableOpacity>


                    <TouchableOpacity style={{height:45,width:sys.dwidth/2,marginLeft:sys.dwidth/2 - 160}}
                    onPress={() => {
                        this.buynow()
                    }}
                    >
                    <TouchableOpacity  style={[styles.payButton,{marginLeft:(sys.dwidth/2 - 60)/2}]}
                                       onPress={() => {
                                          this.buynow()
                                       }}
                    >
                        <Text style={styles.payButtonText}>下注</Text>
                    </TouchableOpacity>

                    </TouchableOpacity>

                </View>

                <Toast  //提示
                    ref="toast"
                    style={{backgroundColor:'gray'}}
                    position='top'
                    positionValue={200}
                    opacity={0.7}
                    textStyle={{color:'white'}}
                /> 

            </KeyboardAwareScrollView>

        );
    }

}




